<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.21.1@8c473e2437be8b6a8fd8f630f0f11a16b114c494">
  <file src="src/Application.php">
    <MixedArgumentTypeCoercion>
      <code>$middleware</code>
    </MixedArgumentTypeCoercion>
    <PossiblyInvalidArgument>
      <code>$path</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Container/ApplicationConfigInjectionDelegator.php">
    <DocblockTypeContradiction>
      <code>! is_array($item)</code>
      <code>! is_array($routes)</code>
      <code>1</code>
      <code>is_array($methods)</code>
    </DocblockTypeContradiction>
    <MixedArgument>
      <code>$name</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$name</code>
    </MixedAssignment>
    <RedundantCastGivenDocblockType>
      <code>(array) $config</code>
      <code>(array) $config</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[is_int($item['priority'])]]></code>
      <code><![CDATA[isset($item['priority']) && is_int($item['priority'])]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Container/ApplicationFactory.php">
    <MixedArgument>
      <code><![CDATA[$container->get(ApplicationPipeline::class)]]></code>
      <code>ApplicationPipeline::class</code>
    </MixedArgument>
    <UndefinedClass>
      <code>ApplicationPipeline</code>
    </UndefinedClass>
  </file>
  <file src="src/Container/ErrorHandlerFactory.php">
    <InvalidArgument>
      <code><![CDATA[$container->get(ResponseInterface::class)]]></code>
    </InvalidArgument>
    <PossiblyInvalidArgument>
      <code>$generator</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Container/ErrorResponseGeneratorFactory.php">
    <MixedArgument>
      <code>$debug</code>
      <code>$errorHandlerConfig</code>
      <code>$template</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$errorHandlerConfig['template_error']]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$debug</code>
      <code>$errorHandlerConfig</code>
      <code>$template</code>
    </MixedAssignment>
    <PossiblyInvalidArgument>
      <code>$renderer</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Container/FilterUsingXForwardedHeadersFactory.php">
    <MixedArrayAccess>
      <code>$appConfig[ConfigProvider::DIACTOROS_CONFIG_KEY][ConfigProvider::DIACTOROS_SERVER_REQUEST_FILTER_CONFIG_KEY]</code>
      <code>$appConfig[ConfigProvider::DIACTOROS_CONFIG_KEY][ConfigProvider::DIACTOROS_SERVER_REQUEST_FILTER_CONFIG_KEY][ConfigProvider::DIACTOROS_X_FORWARDED_FILTER_CONFIG_KEY]</code>
    </MixedArrayAccess>
  </file>
  <file src="src/Container/NotFoundHandlerFactory.php">
    <MixedArgument>
      <code>$errorHandlerConfig</code>
      <code>$template</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$errorHandlerConfig['template_404']]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$errorHandlerConfig</code>
      <code>$template</code>
    </MixedAssignment>
    <PossiblyInvalidArgument>
      <code>$renderer</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Container/RequestHandlerRunnerFactory.php">
    <InvalidArgument>
      <code><![CDATA[$container->get(ServerRequestInterface::class)]]></code>
    </InvalidArgument>
    <MixedArgument>
      <code><![CDATA[$container->get(ApplicationPipeline::class)]]></code>
      <code>ApplicationPipeline::class</code>
    </MixedArgument>
    <UndefinedClass>
      <code>ApplicationPipeline</code>
    </UndefinedClass>
  </file>
  <file src="src/Container/ServerRequestErrorResponseGeneratorFactory.php">
    <MixedArgument>
      <code>$debug</code>
      <code>$template</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$debug</code>
      <code>$template</code>
    </MixedAssignment>
    <PossiblyInvalidArgument>
      <code>$renderer</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Container/WhoopsErrorResponseGeneratorFactory.php">
    <MixedArgument>
      <code><![CDATA[$container->get('Mezzio\Whoops')]]></code>
    </MixedArgument>
  </file>
  <file src="src/Container/WhoopsFactory.php">
    <MixedArgument>
      <code>$config</code>
      <code><![CDATA[$container->get('Mezzio\WhoopsPageHandler')]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$config</code>
    </MixedAssignment>
  </file>
  <file src="src/Container/WhoopsPageHandlerFactory.php">
    <MixedArgument>
      <code>$config</code>
      <code>$editor</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$config['whoops']]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$config</code>
      <code>$config</code>
      <code>$editor</code>
    </MixedAssignment>
  </file>
  <file src="src/Middleware/WhoopsErrorResponseGenerator.php">
    <MixedAssignment>
      <code>$handler</code>
      <code>$request</code>
      <code>$scriptName</code>
      <code>$uri</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getAttributes</code>
      <code>getCookieParams</code>
      <code>getHeaders</code>
      <code>getMethod</code>
      <code>getParsedBody</code>
      <code>getQueryParams</code>
      <code>getServerParams</code>
    </MixedMethodCall>
    <RedundantConditionGivenDocblockType>
      <code>is_object($whoops)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/MiddlewareContainer.php">
    <InvalidStringClass>
      <code>new $service()</code>
    </InvalidStringClass>
  </file>
  <file src="src/Response/ServerRequestErrorResponseGenerator.php">
    <PropertyNotSetInConstructor>
      <code>ServerRequestErrorResponseGenerator</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/ConfigProviderTest.php">
    <ArgumentTypeCoercion>
      <code>$dependencies</code>
    </ArgumentTypeCoercion>
    <MixedArgument>
      <code>ApplicationPipeline::class</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$json['packages']]]></code>
      <code><![CDATA[$package['extra']]]></code>
      <code><![CDATA[$package['extra']['laminas']]]></code>
      <code><![CDATA[$package['extra']['laminas']['config-provider']]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$json</code>
      <code>$package</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[new $package['extra']['laminas']['config-provider']()]]></code>
    </MixedMethodCall>
    <RedundantCondition>
      <code>assertIsArray</code>
    </RedundantCondition>
    <UndefinedClass>
      <code>ApplicationPipeline</code>
    </UndefinedClass>
  </file>
  <file src="test/Container/ApplicationConfigInjectionDelegatorTest.php">
    <MixedAssignment>
      <code>$pipeline</code>
    </MixedAssignment>
  </file>
  <file src="test/Container/ApplicationFactoryTest.php">
    <MixedArgument>
      <code>ApplicationPipeline::class</code>
    </MixedArgument>
    <UndefinedClass>
      <code>ApplicationPipeline</code>
    </UndefinedClass>
  </file>
  <file src="test/Container/ErrorHandlerFactoryTest.php">
    <InvalidArgument>
      <code>$generator</code>
    </InvalidArgument>
  </file>
  <file src="test/Container/NotFoundHandlerFactoryTest.php">
    <InvalidArgument>
      <code><![CDATA[$this->container->get(ResponseInterface::class)]]></code>
      <code><![CDATA[$this->container->get(ResponseInterface::class)]]></code>
      <code><![CDATA[$this->container->get(ResponseInterface::class)]]></code>
      <code><![CDATA[$this->container->get(ResponseInterface::class)]]></code>
    </InvalidArgument>
  </file>
  <file src="test/Container/RequestHandlerRunnerFactoryTest.php">
    <InvalidArgument>
      <code>$errorGenerator</code>
    </InvalidArgument>
    <InvalidFunctionCall>
      <code>$errorGenerator($e)</code>
    </InvalidFunctionCall>
    <MixedArgument>
      <code>ApplicationPipeline::class</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$toTest</code>
      <code>$toTest</code>
    </MixedAssignment>
    <MixedFunctionCall>
      <code>$toTest($e)</code>
      <code>$toTest()</code>
    </MixedFunctionCall>
    <UndefinedClass>
      <code>ApplicationPipeline</code>
    </UndefinedClass>
  </file>
  <file src="test/Container/ResponseFactoryFactoryTest.php">
    <RedundantCondition>
      <code>assertIsCallable</code>
    </RedundantCondition>
  </file>
  <file src="test/Container/ResponseFactoryFactoryWithoutDiactorosTest.php">
    <MixedArgument>
      <code>$autoloader</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$autoloader</code>
    </MixedAssignment>
  </file>
  <file src="test/Container/ServerRequestFactoryFactoryTest.php">
    <RedundantCondition>
      <code>assertIsCallable</code>
    </RedundantCondition>
  </file>
  <file src="test/Container/ServerRequestFactoryFactoryWithoutDiactorosTest.php">
    <MixedArgument>
      <code>$autoloader</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$autoloader</code>
    </MixedAssignment>
  </file>
  <file src="test/Container/StreamFactoryFactoryTest.php">
    <RedundantCondition>
      <code>assertIsCallable</code>
    </RedundantCondition>
  </file>
  <file src="test/Container/StreamFactoryFactoryWithoutDiactorosTest.php">
    <MixedArgument>
      <code>$autoloader</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$autoloader</code>
    </MixedAssignment>
  </file>
  <file src="test/Container/TestAsset/CallableInteropMiddleware.php">
    <MissingParamType>
      <code>$request</code>
    </MissingParamType>
  </file>
  <file src="test/Container/TestAsset/CallableMiddleware.php">
    <MissingParamType>
      <code>$request</code>
      <code>$response</code>
    </MissingParamType>
  </file>
  <file src="test/Container/TestAsset/InteropMiddleware.php">
    <InvalidReturnType>
      <code>ResponseInterface</code>
    </InvalidReturnType>
  </file>
  <file src="test/Container/WhoopsFactoryTest.php">
    <MixedAssignment>
      <code>$handler</code>
      <code>$stack</code>
    </MixedAssignment>
  </file>
  <file src="test/ExceptionTest.php">
    <PossiblyFalseOperand>
      <code><![CDATA[strrpos(ExceptionInterface::class, '\\')]]></code>
    </PossiblyFalseOperand>
  </file>
  <file src="test/InMemoryContainer.php">
    <MixedReturnStatement>
      <code><![CDATA[$this->services[$id]]]></code>
    </MixedReturnStatement>
  </file>
  <file src="test/Middleware/ErrorResponseGeneratorTest.php">
    <MixedArgument>
      <code>$body</code>
    </MixedArgument>
  </file>
  <file src="test/Middleware/WhoopsErrorResponseGeneratorTest.php">
    <InvalidArgument>
      <code>$whoops</code>
      <code>$whoops</code>
    </InvalidArgument>
  </file>
  <file src="test/MiddlewareFactoryTest.php">
    <MissingClosureParamType>
      <code>$handler</code>
      <code>$request</code>
    </MissingClosureParamType>
    <MixedArgument>
      <code><![CDATA[$r->getValue($pipeline)]]></code>
      <code><![CDATA[$r->getValue($pipeline)]]></code>
      <code>$received[0]</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$received</code>
    </MixedAssignment>
  </file>
  <file src="test/Response/CallableResponseFactoryDecoratorTest.php">
    <InternalMethod>
      <code><![CDATA[new CallableResponseFactoryDecorator(fn(): ResponseInterface => $this->response)]]></code>
    </InternalMethod>
  </file>
  <file src="test/Router/IntegrationTest.php">
    <ArgumentTypeCoercion>
      <code>$router</code>
      <code>$router</code>
    </ArgumentTypeCoercion>
    <InvalidStringClass>
      <code>new $adapter()</code>
    </InvalidStringClass>
    <MissingClosureParamType>
      <code>$handler</code>
      <code>$handler</code>
      <code>$handler</code>
      <code>$handler</code>
      <code>$handler</code>
      <code>$handler</code>
      <code>$handler</code>
      <code>$handler</code>
      <code>$req</code>
      <code>$req</code>
      <code>$req</code>
      <code>$req</code>
      <code>$req</code>
      <code>$req</code>
      <code>$req</code>
      <code>$req</code>
    </MissingClosureParamType>
  </file>
  <file src="test/TestAsset/InteropMiddleware.php">
    <InvalidReturnType>
      <code>ResponseInterface</code>
    </InvalidReturnType>
    <ParamNameMismatch>
      <code>$delegate</code>
    </ParamNameMismatch>
  </file>
  <file src="test/TestAsset/InvokableMiddleware.php">
    <MissingParamType>
      <code>$next</code>
      <code>$next</code>
      <code>$request</code>
      <code>$request</code>
      <code>$response</code>
      <code>$response</code>
    </MissingParamType>
    <MissingReturnType>
      <code>staticallyCallableMiddleware</code>
    </MissingReturnType>
    <MixedMethodCall>
      <code>withHeader</code>
    </MixedMethodCall>
  </file>
</files>
